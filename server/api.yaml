Вот исправленная OpenAPI спецификация с устраненными ошибками:

```yaml
openapi: 3.0.0
info:
  title: Project Management API
  version: 2.0.0
  description: API for managing projects, files, users, and document editing

tags:
  - name: Auth
    description: Authentication operations
  - name: User
    description: User management operations
  - name: Project
    description: Project management operations
  - name: Project Access
    description: Manage user access to projects
  - name: File
    description: File management operations
  - name: Project Files
    description: Manage files within projects
  - name: File Storage
    description: File upload and storage operations
  - name: Super-object
    description: Document content structures
  - name: Content-block
    description: Document content blocks
  - name: Style
    description: Document styling operations
  - name: StylesMap
    description: Document style mapping operations

paths:
  /users/login:
    post:
      tags:
        - Auth
      summary: Login and get authentication token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '401':
          description: Invalid login or password

  /users/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  surname:
                    type: string
                  login:
                    type: string
                  photo:
                    type: string
        '400':
          description: Login is already taken

  /users/me:
    get:
      tags:
        - User
      summary: Get current authenticated user info
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  surname:
                    type: string
                  login:
                    type: string
                  photo:
                    type: string
        '401':
          description: Unauthorized

  /users/search:
    get:
      tags:
        - User
      summary: Search users by login
      parameters:
        - name: login
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of users matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDto'

  /users/{user_id}:
    get:
      tags:
        - User
      summary: Get user by ID
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      tags:
        - User
      summary: Update user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    delete:
      tags:
        - User
      summary: Delete user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found

  /projects:
    post:
      tags:
        - Project
      summary: Create a new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponseDto'

    get:
      tags:
        - Project
      summary: Get current user's projects
      responses:
        '200':
          description: List of projects for current user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponseDto'

  /projects/{project_id}:
    get:
      tags:
        - Project
      summary: Get project by ID
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponseDto'
        '404':
          description: Project not found

    put:
      tags:
        - Project
      summary: Update a project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponseDto'
        '404':
          description: Project not found

    delete:
      tags:
        - Project
      summary: Delete a project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Project deleted successfully
        '404':
          description: Project not found

  /projects-users:
    post:
      tags:
        - Project Access
      summary: Link user to project with role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUserDto'
      responses:
        '201':
          description: User linked to project successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUserView'

  /projects-users/project/{project_id}/users:
    get:
      tags:
        - Project Access
      summary: Get users of a project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of users in the project
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectUserView'

  /projects-users/project/{project_id}/user/{user_id}:
    put:
      tags:
        - Project Access
      summary: Update user's role in a project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRoleDto'
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUserView'
        '404':
          description: Project or user not found

    delete:
      tags:
        - Project Access
      summary: Remove user from project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User removed from project successfully
        '404':
          description: Project or user not found

  /files:
    post:
      tags:
        - File
      summary: Create a new file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileDto'
      responses:
        '200':
          description: File created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponseDto'

  /files/{file_id}:
    get:
      tags:
        - File
      summary: Get file by ID
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: File details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponseDto'
        '404':
          description: File not found

    put:
      tags:
        - File
      summary: Update file
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileDto'
      responses:
        '200':
          description: File updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponseDto'
        '404':
          description: File not found

    patch:
      tags:
        - File
      summary: Update file's super object ID
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                superObjectId:
                  type: string
                  nullable: true
      responses:
        '200':
          description: File updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponseDto'
        '404':
          description: File not found

    delete:
      tags:
        - File
      summary: Delete file
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: File deleted successfully
        '404':
          description: File not found

  /files/{file_id}/name:
    patch:
      tags:
        - File
      summary: Update file name
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileUpdateNameDto'
      responses:
        '200':
          description: File name updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponseDto'
        '404':
          description: File not found

  /file-types:
    post:
      tags:
        - File
      summary: Create a new file type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: File type created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileType'

    get:
      tags:
        - File
      summary: Get all file types
      responses:
        '200':
          description: List of file types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileType'

  /projects/{project_id}/files:
    get:
      tags:
        - Project Files
      summary: Get all files for a project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of files for this project
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectFileResponseDto'
        '404':
          description: Project not found

    post:
      tags:
        - Project Files
      summary: Upload and link file to project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload
                type_id:
                  type: integer
                  description: Type ID of the file
      responses:
        '201':
          description: File uploaded and linked to project successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFileResponseDto'
        '404':
          description: Project not found

  /projects/{project_id}/files/link:
    post:
      tags:
        - Project Files
      summary: Link existing file to project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
        - name: file_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: File linked to project successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  project_id:
                    type: integer
                  file_id:
                    type: integer
        '404':
          description: Project or File not found

  /projects/{project_id}/files/{file_id}:
    get:
      tags:
        - Project Files
      summary: Get file details in project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
        - name: file_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: File details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFileResponseDto'
        '404':
          description: Project or File not found

    delete:
      tags:
        - Project Files
      summary: Unlink file from project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
        - name: file_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: File unlinked from project successfully
        '404':
          description: Project or File not found

  /projects/{project_id}/files/{file_id}/name:
    patch:
      tags:
        - Project Files
      summary: Update file name in project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
        - name: file_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileUpdateNameDto'
      responses:
        '200':
          description: File name updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFileResponseDto'
        '404':
          description: Project or File not found

  /projects/{project_id}/files/{file_id}/super-object:
    patch:
      tags:
        - Project Files
      summary: Update file's super object ID in project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
        - name: file_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                superObjectId:
                  type: string
                  nullable: true
      responses:
        '200':
          description: File super object updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFileResponseDto'
        '404':
          description: Project or File not found

  /projects/{project_id}/files/{file_id}/download:
    get:
      tags:
        - Project Files
      summary: Download file from project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
        - name: file_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Project or File not found

  /files-storage/upload/image:
    post:
      tags:
        - File Storage
      summary: Upload image file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResponse'
        '500':
          description: Error uploading file

  /super-objects:
    post:
      tags:
        - Super-object
      summary: Create SuperObject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuperObject'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuperObject'

  /super-objects/by-file/{fileId}:
    get:
      tags:
        - Super-object
      summary: Get SuperObject by fileId
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Content super object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuperObject'
        '404':
          description: Not found

  /super-objects/{id}:
    get:
      tags:
        - Super-object
      summary: Get SuperObject by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Content super object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuperObject'
        '404':
          description: Not found
    
    put:
      tags:
        - Super-object
      summary: Update SuperObject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuperObject'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuperObject'
    
    delete:
      tags:
        - Super-object
      summary: Delete SuperObject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted

  /super-objects/{superObjectId}/sync-blocks:
    put:
      tags:
        - Super-object
      summary: Sync document blocks
      parameters:
        - name: superObjectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EditorJsBlockDto'
      responses:
        '200':
          description: Blocks synchronized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuperObject'
        '404':
          description: SuperObject not found

  /content-blocks:
    post:
      tags:
        - Content-block
      summary: Create ContentBlock
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentBlock'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentBlock'

  /content-blocks/{id}:
    get:
      tags:
        - Content-block
      summary: Get ContentBlock by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ContentBlock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentBlock'
    
    put:
      tags:
        - Content-block
      summary: Update ContentBlock
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentBlock'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentBlock'
    
    delete:
      tags:
        - Content-block
      summary: Delete ContentBlock
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted

  /styles:
    post:
      tags:
        - Style
      summary: Create Style
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Style'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Style'

  /styles/{id}:
    get:
      tags:
        - Style
      summary: Get Style by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Style
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Style'
    
    put:
      tags:
        - Style
      summary: Update Style
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Style'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Style'
    
    delete:
      tags:
        - Style
      summary: Delete Style
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted

  /styles-maps:
    post:
      tags:
        - StylesMap
      summary: Create StylesMap
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StylesMap'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StylesMap'

  /styles-maps/{id}:
    get:
      tags:
        - StylesMap
      summary: Get StylesMap by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: StylesMap
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StylesMap'
    
    put:
      tags:
        - StylesMap
      summary: Update StylesMap
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StylesMap'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StylesMap'
    
    delete:
      tags:
        - StylesMap
      summary: Delete StylesMap
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted

components:
  schemas:
    LoginRequest:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password

    JwtResponse:
      type: object
      properties:
        token:
          type: string
        id:
          type: integer
        login:
          type: string
        name:
          type: string
        surname:
          type: string
        photo:
          type: string

    RegisterRequest:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        login:
          type: string
        password:
          type: string
        photo:
          type: string
      required:
        - name
        - surname
        - login
        - password

    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        surname:
          type: string
        login:
          type: string
        passwordInternal:
          type: string
        photo:
          type: string
        enabledInternal:
          type: boolean
        accountNonExpiredInternal:
          type: boolean
        accountNonLockedInternal:
          type: boolean
        credentialsNonExpiredInternal:
          type: boolean

    UserResponseDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        surname:
          type: string
        login:
          type: string
        photo:
          type: string

    Project:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        owner:
          $ref: '#/components/schemas/User'

    ProjectResponseDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        owner:
          $ref: '#/components/schemas/UserResponseDto'
        projectFiles:
          type: array
          items:
            $ref: '#/components/schemas/ProjectFileResponseDto'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/ProjectParticipantDto'
        currentUserRole:
          $ref: '#/components/schemas/ProjectRole'

    ProjectParticipantDto:
      type: object
      properties:
        userId:
          type: integer
        login:
          type: string
        name:
          type: string
        surname:
          type: string
        photo:
          type: string
        role:
          $ref: '#/components/schemas/ProjectRole'

    ProjectRole:
      type: string
      enum: [OWNER, EDITOR, VIEWER]

    ProjectUserDto:
      type: object
      properties:
        projectId:
          type: integer
        userId:
          type: integer
        role:
          $ref: '#/components/schemas/ProjectRole'
      required:
        - projectId
        - userId
        - role

    UpdateUserRoleDto:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/ProjectRole'
      required:
        - role

    ProjectUserView:
      type: object
      properties:
        id:
          type: integer
        projectId:
          type: integer
        userId:
          type: integer
        userLogin:
          type: string
        userName:
          type: string
        userSurname:
          type: string
        userPhoto:
          type: string
        role:
          $ref: '#/components/schemas/ProjectRole'

    FileType:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    File:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          $ref: '#/components/schemas/FileType'
        authorId:
          type: integer
        uploadDate:
          type: string
          format: date-time
        superObjectId:
          type: string
        filePath:
          type: string

    FileDto:
      type: object
      properties:
        name:
          type: string
        typeId:
          type: integer
        authorId:
          type: integer
        superObjectId:
          type: string
      required:
        - name
        - typeId
        - authorId

    FileResponseDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        typeId:
          type: integer
        typeName:
          type: string
        authorId:
          type: integer
        uploadDate:
          type: string
        superObjectId:
          type: string
        filePath:
          type: string

    FileUpdateNameDto:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    ProjectFileResponseDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          $ref: '#/components/schemas/FileTypeResponseDto'
        authorId:
          type: integer
        date:
          type: string
        superObjectId:
          type: string

    FileTypeResponseDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    FileUploadResponse:
      type: object
      properties:
        success:
          type: integer
        file:
          $ref: '#/components/schemas/FileDetails'

    FileDetails:
      type: object
      properties:
        url:
          type: string
        name:
          type: string
        size:
          type: integer
          format: int64

    EditorJsBlockDto:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        data:
          type: object
          additionalProperties: true

    SuperObject:
      type: object
      properties:
        id:
          type: string
        fileId:
          type: integer
        serviceType:
          type: string
        lastChangeDate:
          type: string
        name:
          type: string
        template:
          $ref: '#/components/schemas/Template'
        decoration:
          $ref: '#/components/schemas/Decoration'
        firstItem:
          type: string
        lastItem:
          type: string
        checkSum:
          type: integer
        stylesMapId:
          type: string

    Template:
      type: object
      properties:
        image:
          type: string
        type:
          type: string
        color:
          type: string

    Decoration:
      type: object
      properties:
        marginTop:
          type: integer
        marginRight:
          type: integer
        marginLeft:
          type: integer
        marginBottom:
          type: integer

    ContentBlock:
      type: object
      properties:
        id:
          type: string
        objectType:
          type: string
        nextItem:
          type: string
        prevItem:
          type: string
        data:
          type: object
          additionalProperties: true

    Style:
      type: object
      properties:
        id:
          type: string
        objectType:
          type: string
        appliedObject:
          type: string
        alignment:
          type: string
        color:
          type: string
        fontFamily:
          type: string
        fontSize:
          type: integer
        marginTop:
          type: integer
        marginRight:
          type: integer
        marginLeft:
          type: integer
        marginBottom:
          type: integer
        frame:
          type: boolean
        padding:
          type: array
          items:
            type: integer
        position:
          type: array
          items:
            type: integer

    StylesMap:
      type: object
      properties:
        id:
          type: string
        objectType:
          type: string
        links:
          type: array
          items:
            $ref: '#/components/schemas/StyleLink'

    StyleLink:
      type: object
      properties:
        elementId:
          type: string
        styleId:
          type: string
        start:
          type: integer
        end:
          type: integer
